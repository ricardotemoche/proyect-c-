#include <iostream>
#include <fstream>
#include <cstring>
#include <cstdlib>
#include <conio.h>
using namespace std;

const char DATOS[] = "datos_agenda.dat";

struct Persona{
    char nombre[40];
    char apell[50];
    int edad;
    char email[50];
}; 

// FUNCIONES DE LA AGENDA
void ingresar(Persona x);
Persona leer();
bool existe(char nombre[],char apell[]);
Persona buscar(char nombre[],char apell[]);
void mostrar(Persona x);
void listar();
void eliminar(char nombre[],char apell[]);
void actualizar(char nombre[],char apell[]);
int contadorAgenda();


// FUNCIONES PARA EL MENU 
void ingresar();
void buscar();
void listado();
void borrar();
void actualizar();

int main(){
    int menu;
    do{
        system("cls");
        cout<<"\t\t\t\t\tAGENDA"<<endl;
        cout<<"\t\t\tIngresar contacto............[1]"<<endl;
        cout<<"\t\t\tBuscar contacto..............[2]"<<endl;
        cout<<"\t\t\tVer listado..................[3]"<<endl;
        cout<<"\t\t\tEliminar contacto............[4]"<<endl;
        cout<<"\t\t\tActualizar contacto..........[5]"<<endl;
        cout<<"\t\t\tSALIR........................[6]"<<endl;
        cout<<"\t\t\tIngrese una opcion ->:";
        cin>>menu;
        cin.ignore();
        switch(menu){
            case 1 : system("cls"); 
                     ingresar();
                     break;
            case 2 : system("cls");
                     buscar();
                     break;
            case 3 : system("cls");
                     listado();
                     break;
            case 4 : system("cls");
                     borrar();
                     break;
            case 5 : system("cls");
                     actualizar();
                     break;
            case 6 : break;
            default: cout<<"\t\t\tOpcion incorrecta"<<endl;
        }
    }while(menu!=6);
    return 0;
}

void ingresar(Persona x){
    ofstream salida;
    salida.open(DATOS, ios::binary | ios::app);
    salida.write((char*)&x,sizeof(Persona));
    salida.close();
}

Persona leer(){
    Persona x;
    cout<<"\t\t\tNOMBRE   : ";
    cin.getline(x.nombre,40);
    cout<<"\t\t\tAPELLIDO : ";
    cin.getline(x.apell,50);
    cout<<"\t\t\tEDAD     : ";
    cin>>x.edad;
    cin.ignore();
    cout<<"\t\t\tCORREO   : ";
    cin.getline(x.email,45);
    return x;
}

bool existe(char nombre[],char apell[]){
    Persona x;
    ifstream entrada;
    entrada.open(DATOS,ios::binary);
    if(entrada.good()){
        while(entrada.read((char*)&x,sizeof(Persona))){
            strcmp(nombre,x.nombre);
            if(strcmp(nombre,x.nombre)==0 && strcmp(apell,x.apell)==0){
                entrada.close();
                return true;
            }
        }
        entrada.close();
        return false;
    }
    else{
        entrada.close();
        return false;
    }
}

Persona buscar(char nombre[],char apell[]){
    Persona x;
    ifstream entrada;
    entrada.open(DATOS,ios::binary);
    
	if(entrada.good()){
        while(entrada.read((char*)&x,sizeof(Persona))){
            if(strcmp(nombre,x.nombre)==0 && strcmp(apell,x.apell)==0){
				entrada.close();
                return x;
            }
        }
    }
}

void mostrar(Persona x){
    cout<<endl;
    cout<<"\t\t\t NOMBRE   : "<<x.nombre<<endl;
    cout<<"\t\t\t APELLIDO : "<<x.apell<<endl;
    cout<<"\t\t\t EDAD     : "<<x.edad<<endl;
    cout<<"\t\t\t CORREO   : "<<x.email<<endl;
    cout<<endl;
}

int contadorAgenda(){ 
	ifstream entrada;
	    entrada.open(DATOS,ios::binary);
	    Persona x;
	    int contador=0;
	    if(entrada.good()){
	        while(entrada.read((char*)&x,sizeof(Persona))){
	            contador++;
	        }}
	    return contador;
}


void listar(){
    ifstream entrada;
    entrada.open(DATOS,ios::binary);
    Persona x;
    if(entrada.good()){
        while(entrada.read((char*)&x,sizeof(Persona))){
            mostrar(x);
            } 

    }
    else{
        cout<<"No se puede leer el archivo"<<endl;
    }
    entrada.close();
}

void eliminar(char nombre[],char apell[]){
    
    ifstream entrada;
    ofstream temporal;
    entrada.open(DATOS,ios::binary);
    temporal.open("temporal.dat",ios::binary);
    Persona x;
    if(entrada.good()){
        while(entrada.read((char*)&x,sizeof(Persona))){
            if(strcmp(nombre,x.nombre)!=0 || strcmp(apell,x.apell)!=0){
                temporal.write((char*)&x,sizeof(Persona));
            }
        }
    }
    entrada.close();
    temporal.close();
    remove(DATOS);
    rename("temporal.dat",DATOS);
}

void actualizar(char nombre[],char apell[]){
   
    ifstream entrada;
    ofstream temporal;
    entrada.open(DATOS,ios::binary);
    temporal.open("temporal.dat",ios::binary);
    Persona x;
    if(entrada.good()){
        while(entrada.read((char*)&x,sizeof(Persona))){
            if(strcmp(nombre,x.nombre)==0 && strcmp(apell,x.apell)==0){
                Persona actualizado = leer();
                temporal.write((char*)&actualizado,sizeof(actualizado));
            }
            else{
                temporal.write((char*)&x,sizeof(Persona));
            }
        }
    }
    entrada.close();
    temporal.close();
    remove(DATOS);
    rename("temporal.dat",DATOS);
}

void ingresar(){
    cout<<"\t\t\t\tINGRESO DE NUEVO CONTACTO"<<endl;
    Persona nuevo = leer();
    ingresar(nuevo);
    cout<<"\t\t\t    ****Contacto agregado con exito****"<<endl;
    getch();
}

void buscar(){
    cout<<"\t\t\t\tBUSCAR CONTACTO"<<endl;
    char nombre[30],apell[50];
    cout<<"\t\t\tIngrese los datos de busqueda:"<<endl;
    cout<<"\t\t\tNOMBRE   : ";
    cin.getline(nombre,30);
    cout<<"\t\t\tAPELLIDO: ";
    cin.getline(apell,50);
    if(existe(nombre,apell)){
        Persona buscado = buscar(nombre,apell);
        mostrar(buscado);
        getch();
    }
    else{
        cout<<"\t\t\tNO se encuentra ese contacto"<<endl;
        getch();
    }
}

void listado(){
    cout<<"\t\t\t\tLISTA DE CONTACTOS ("<<contadorAgenda()<<")"<<endl;
    listar();
    getch();
}

void borrar(){
    cout<<"\t\t\t\tELIMINAR CONTACTO"<<endl; 	             	
    char nombre[40],apell[50];
    cout<<"\t\t\tIngrese los datos de eliminacion:"<<endl;
    cout<<"\t\t\tNOMBRE   : ";
    cin.getline(nombre,40);
    cout<<"\t\t\tAPELLIDO: ";
    cin.getline(apell,50);
    
	if(existe(nombre,apell)){
        Persona eliminado = buscar(nombre,apell);
        int operacion;
        cout<<"\t\t\tSeguro que desea eliminar el siguiente contacto?";
        mostrar(eliminado);
        do{
            cout<<"\t\t\tSI[1]....NO[2]:";
            cin>>operacion;
            switch(operacion){
                case 1: eliminar(nombre,apell);
                        cout<<"\t\t\tContacto eliminado con exito"<<endl;
                        break;
                case 2: break;
                default: cout<<"\t\t\tOPCION INCORRECTA"<<endl;
            }
        }while(operacion!=1 && operacion!=2);
    }
    else{
        cout<<"\t\t\tNO EXISTE EL CONTACTO"<<endl;
    }
}

void actualizar(){
    cout<<"\t\t\t\tACTUALIZAR CONTACTO"<<endl;
    char nombre[40],apell[50];
    cout<<"\t\t\tIngrese los datos de modificacion:"<<endl;
    cout<<"\t\t\tNOMBRE   : ";
    cin.getline(nombre,30);
    cout<<"\t\t\tAPELLIDO: ";
    cin.getline(apell,50);
    if(existe(nombre,apell)){
        Persona buscado = buscar(nombre,apell);
        cout<<"\t\t\tRegistro a modificar:"<<endl;
        mostrar(buscado);
        actualizar(nombre,apell);
        cout<<"\t\t\tSE ACTUALIZO EL REGISTRO"<<endl;
    }
    else{
        cout<<"\t\t\tNO EXISTE EL CONTACTO"<<endl;
    }
}
